{"version":3,"file":"Button.js","sourceRoot":"","sources":["../../../../src/atom/Button/Button.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,8CAA8C,CAAC;AACtD,OAAO,SAAS,CAAC;AACjB,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D,OAAO,EAAC,qBAAqB,EAAC,MAAM,iDAAiD,CAAC;AACtF,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAC,SAAS,EAAC,MAAM,2BAA2B,CAAC;AACpD;;;;GAIG;AAEH,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,UAAU;IAAtC;;QASE;;WAEG;QAEI,iBAAY,GAAW,SAAS,CAAC;QAQxC;;WAEG;QAEI,aAAQ,GAAY,KAAK,CAAC;IA4CnC,CAAC;IA1CC,MAAM;QACJ,OAAO,IAAI,CAAC,IAAI;YACd,CAAC,CAAC,IAAI,CAAA;;;;;6BAKiB,IAAI,CAAC,IAAI,QAAQ,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;;;yBAGxC,GAAG,EAAE;gBACZ,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,MAAM,KAAK,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;iBAC3B;YACH,CAAC;;;;;;;;SAQR;YACH,CAAC,CAAC,IAAI,CAAA;;;;;;qBAMS,GAAG,EAAE;gBACZ,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,MAAM,KAAK,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;iBAC3B;YACH,CAAC;;;;;gCAKmB,CAAC;IAC/B,CAAC;CACF,CAAA;AApEQ,aAAM,GAAG,CAAC,KAAK,CAAC,CAAC;AAMxB;IADC,QAAQ,EAAE;;qCACiB;AAM5B;IADC,QAAQ,EAAE;;4CAC6B;AAGxC;IADC,QAAQ,EAAE;;oCACU;AAGrB;IADC,QAAQ,EAAE;;mCACS;AAMpB;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC;;wCACR;AAzBtB,MAAM;IADlB,aAAa,CAAC,YAAY,CAAC;GACf,MAAM,CAqElB;SArEY,MAAM","sourcesContent":["import '../../molecule/BackgroundClip/BackgroundClip';\nimport '../Link';\nimport {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {viewVariants} from '../../controller/ressources/views';\nimport {LitCoilConnectedEvent} from '../../controller/UpdateControllerConnectedEvent';\nimport style from './style.css';\nimport {ifDefined} from 'lit/directives/if-defined';\n/**\n * Text Styling Component\n *\n * @slot - Slot of the element for the text\n */\n@customElement('iff-button')\nexport class Button extends LitElement {\n  static styles = [style];\n\n  /**\n   * Type of styling\n   */\n  @property()\n  public event?: viewVariants;\n\n  /**\n   * Event Payload\n   */\n  @property()\n  public eventPayload: string = 'payload';\n\n  @property()\n  public href?: string;\n\n  @property()\n  public rel?: string;\n\n  /**\n   * Type of styling\n   */\n  @property({reflect: true, type: Boolean})\n  public disabled: boolean = false;\n\n  render() {\n    return this.href\n      ? html`\n          <iff-background-clip\n            backgroundColor=\"theme\"\n            style=\"--iff-hover__font--color: black;\"\n          >\n            <iff-link href=${this.href} rel=${ifDefined(this.rel)}>\n              <div\n                class=\"button\"\n                @click=${() => {\n                  if (this.event) {\n                    const event = new LitCoilConnectedEvent(this.event);\n                    this.dispatchEvent(event);\n                  }\n                }}\n              >\n                <slot name=\"prefix\"></slot>\n                <slot></slot>\n                <slot name=\"suffix\"></slot>\n              </div>\n            </iff-link>\n          </iff-background-clip>\n        `\n      : html`<iff-background-clip\n          backgroundColor=\"theme\"\n          style=\"--iff-hover__font--color: black;\"\n        >\n          <button\n            class=\"button\"\n            @click=${() => {\n              if (this.event) {\n                const event = new LitCoilConnectedEvent(this.event);\n                this.dispatchEvent(event);\n              }\n            }}\n          >\n            <slot name=\"prefix\"></slot>\n            <slot></slot>\n            <slot name=\"suffix\"></slot></button\n        ></iff-background-clip>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'iff-button': Button;\n  }\n}\n"]}
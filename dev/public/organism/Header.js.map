{"version":3,"file":"Header.js","sourceRoot":"","sources":["../../../src/organism/Header.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,cAAc,CAAC;AACtB,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAC,gBAAgB,EAAC,MAAM,iCAAiC,CAAC;AAGjE;;;;GAIG;AAEH,IAAa,MAAM,GAAnB,MAAa,MAAO,SAAQ,UAAU;IAoBpC;QACE,KAAK,EAAE,CAAC;QAGF,qBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAGtD,aAAQ,GAAY,CAAC,CAAC;QAGtB,oBAAe,GAAY,KAAK,CAAC;IARjC,CAAC;IAUD,MAAM;QACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,CAAC,CAAC;QACrD,OAAO,IAAI,CAAA,gBAAgB,CAAC;IAC9B,CAAC;CACF,CAAA;AAnCQ,aAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;GAiBlB,CAAC;AASF;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAC,CAAC;;wCAClB;AAGtB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;;+CACO;AA9BtB,MAAM;IADlB,aAAa,CAAC,YAAY,CAAC;;GACf,MAAM,CAoClB;SApCY,MAAM","sourcesContent":["import './Navigation';\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {OffsetController} from '../controller/offset-controller';\nimport {ScrollIndicatorController} from '../controller/scrollIndicatorController copy';\n\n/**\n * Text Styling Component\n *\n * @slot - This element has a slot\n */\n@customElement('iff-header')\nexport class Header extends LitElement {\n  static styles = css`\n    :host {\n      position: sticky;\n      top: 0;\n      width: 100%;\n      z-index: 100;\n      height: var(--iff-alias__header--height);\n      padding: 0px var(--iff-dynamic__navigation--indent);\n      border-bottom: 2px solid var(--iff-alias__color--positive);\n      background-color: var(--iff-alias__body--background-color);\n      transition: border-bottom var(--iff-alias__transition--intervall);\n    }\n\n    :host([position='0']) {\n      border-bottom: 0px solid var(--iff-alias__color--positive);\n      transition: border-bottom var(--iff-alias__transition--intervall);\n    }\n  `;\n\n  constructor() {\n    super();\n  }\n\n  private offsetController = new OffsetController(this);\n\n  @property({reflect: true, type: Number})\n  position?: number = 0;\n\n  @property({type: Boolean})\n  scrollIndicator: boolean = false;\n\n  render() {\n    this.position = this.offsetController.offsetTop || 0;\n    return html`<slot></slot> `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'iff-header': Header;\n  }\n}\n"]}
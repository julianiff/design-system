{"version":3,"file":"Card.js","sourceRoot":"","sources":["../../../src/molecule/Card.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AAErD,OAAO,EAAC,qBAAqB,EAAC,MAAM,8CAA8C,CAAC;AAEnF;;;;;;;;;GASG;AAEH,IAAa,IAAI,GAAjB,MAAa,IAAK,SAAQ,UAAU;IAApC;;QA+CE;;WAEG;QAEH,QAAG,GAAG,gBAAgB,CAAC;QAEvB;;WAEG;QAEH,oBAAe,GAAG,gCAAgC,CAAC;QAEnD;;;WAGG;QAEH,aAAQ,GAAG,mBAAmB,CAAC;QAQ/B;;WAEG;QAEI,iBAAY,GAAW,SAAS,CAAC;IA8B1C,CAAC;IA5BC,MAAM;QACJ,MAAM,aAAa,GAAG,EAAC,kBAAkB,EAAE,OAAO,IAAI,CAAC,eAAe,GAAG,EAAC,CAAC;QAE3E,OAAO,IAAI,CAAA;;;gBAGC,QAAQ,CAAC,aAAa,CAAC;iBACtB,GAAG,EAAE;YACZ,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,MAAM,KAAK,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC3B;QACH,CAAC;;;sBAGa,IAAI,CAAC,QAAQ;;;;;;;;;;;KAW9B,CAAC;IACJ,CAAC;CACF,CAAA;AAzGQ,WAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4ClB,CAAC;AAMF;IADC,QAAQ,EAAE;;iCACY;AAMvB;IADC,QAAQ,EAAE;;6CACwC;AAOnD;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;;sCACM;AAM/B;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;;mCACE;AAM5B;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;;0CACc;AA5E7B,IAAI;IADhB,aAAa,CAAC,UAAU,CAAC;GACb,IAAI,CA0GhB;SA1GY,IAAI","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {styleMap} from 'lit/directives/style-map.js';\nimport {viewVariants} from '../controller/ressources/views';\nimport {LitCoilConnectedEvent} from '../controller/UpdateControllerConnectedEvent';\n\n/**\n * Card to display articles\n *\n * @slot custom -  Slot to override all Card\n * @slot body -  Slot to override body part\n * @slot title -  Slot to set Card Title\n * @slot lead -  Slot to set Card lead text\n * @slot footer -  Slot to set footer\n * @csspart button - The button\n */\n@customElement('iff-card')\nexport class Card extends LitElement {\n  static styles = css`\n    :host {\n      cursor: pointer;\n      display: flex;\n      flex-direction: column;\n      background-color: var(--iff-card__background-color);\n      --iff-state__font--color: white;\n    }\n\n    .card {\n      transition: all 500ms ease-in;\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      border-radius: var(--iff-alias__border--radius);\n      overflow: hidden;\n    }\n\n    .card:hover {\n      box-shadow: 0px 0px 50px 1px var(--iff-alias__color--complement);\n      transition: all 250ms ease-in;\n    }\n\n    img {\n      border-radius: var(--iff-alias__border--radius);\n      height: 10rem;\n    }\n\n    .body {\n      padding: var(--iff__dimension--20);\n      text-overflow: ellipsis;\n    }\n\n    @media screen and (min-width: 1024px) {\n      .card {\n        flex-direction: row;\n        height: 25vh;\n      }\n      img {\n        height: 100%;\n        width: 200px;\n      }\n    }\n  `;\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property()\n  url = 'url.to.link.to';\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property()\n  backgroundColor = '--iff-alias__color--complement';\n\n  /**\n   * Source of the header image\n   * https://picsum.photos/200/200\n   */\n  @property({type: String})\n  imageSrc = 'dev/Download.jpeg';\n\n  /**\n   * Type of styling\n   */\n  @property({reflect: true})\n  public event?: viewVariants;\n\n  /**\n   * Type of styling\n   */\n  @property({reflect: true})\n  public eventPayload: string = 'payload';\n\n  render() {\n    const backgroundMap = {'background-color': `var(${this.backgroundColor})`};\n\n    return html`\n      <div\n        class=\"card\"\n        style=${styleMap(backgroundMap)}\n        @click=${() => {\n          if (this.event) {\n            const event = new LitCoilConnectedEvent(this.event);\n            this.dispatchEvent(event);\n          }\n        }}\n      >\n        <slot name=\"custom\">\n          <img src=\"${this.imageSrc}\" alt=\"Alt tag\" />\n          <div class=\"body\">\n            <slot name=\"body\">\n              <slot name=\"label\"></slot>\n              <slot name=\"title\"></slot>\n              <slot name=\"lead\"></slot>\n            </slot>\n          </div>\n          <slot name=\"footer\"></slot>\n        </slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'iff-card': Card;\n  }\n}\n"]}
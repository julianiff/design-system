{"version":3,"file":"GridItem.js","sourceRoot":"","sources":["../../../../src/layout/GridItem/GridItem.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAC,MAAM,KAAK,CAAC;AACnD,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,KAAK,MAAM,aAAa,CAAC;AAQhC;;;;GAIG;AAEH,IAAa,QAAQ,GAArB,MAAa,QAAS,SAAQ,UAAU;IAAxC;;QAGE;;WAEG;QAEI,gBAAW,GAAoB,OAAO,CAAC;QAE9C;;WAEG;QAEI,WAAM,GAAkB,IAAI,CAAC;QAEpC;;WAEG;QAEI,UAAK,GAAc,MAAM,CAAC;QAQjC;;WAEG;QAEI,YAAO,GAAY,KAAK,CAAC;IAmBlC,CAAC;IAXC,MAAM;QACJ,OAAO,IAAI,CAAA,IAAI,IAAI,CAAC,OAAO;YACvB,CAAC,CAAC,GAAG,CAAA;;;;mBAIM;YACX,CAAC,CAAC,OAAO;;oBAEG,CAAC;IACnB,CAAC;CACF,CAAA;AAjDQ,eAAM,GAAG,CAAC,KAAK,CAAC,CAAC;AAMxB;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;;6CACoB;AAM9C;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;;wCACU;AAMpC;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;;uCACO;AAMjC;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;;wCACC;AAM3B;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;8BACV,OAAO;yCAAS;AAMhC;IADC,QAAQ,CAAC,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;;4CACS;AArCxB,QAAQ;IADpB,aAAa,CAAC,eAAe,CAAC;GAClB,QAAQ,CAkDpB;SAlDY,QAAQ","sourcesContent":["import {LitElement, html, svg, nothing} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport style from './style.css';\n\ntype gridOrientation = 'start' | 'end' | 'center';\ntype gridWidth = 'slim' | 'default' | 'full';\ntype gridHeight = 'default' | 'full';\ntype gridBackground = 'positive' | 'negative' | 'complement';\ntype spacerVariant = 'sm' | 'md' | 'lg' | 'component';\n\n/**\n * An example element.\n *\n * @slot Slot for the content\n */\n@customElement('iff-grid-item')\nexport class GridItem extends LitElement {\n  static styles = [style];\n\n  /**\n   * Orientation 'start' | 'end' | 'center';\n   */\n  @property({reflect: true})\n  public orientation: gridOrientation = 'start';\n\n  /**\n   * Orientation 'sm' | 'md' | 'lg' | 'component';\n   */\n  @property({reflect: true})\n  public spacer: spacerVariant = 'sm';\n\n  /**\n   * Width\n   */\n  @property({reflect: true})\n  public width: gridWidth = 'full';\n\n  /**\n   * Height\n   */\n  @property({reflect: true})\n  public height?: gridHeight;\n\n  /**\n   * Background Polygon\n   */\n  @property({type: Boolean})\n  public polygon: Boolean = false;\n\n  /**\n   * Background Color\n   */\n  @property({reflect: true})\n  public background?: gridBackground;\n\n  render() {\n    return html` ${this.polygon\n        ? svg`<div class=\"svg-container\"><div class=\"triangle-container\">\n        <svg class=\"scaling\" viewBox=\"75 0 400 500\">\n          <polygon points=\"50,200 50,400 500,300 500, 100\" class=\"triangle\" />\n        </svg>\n      </div></div>`\n        : nothing}\n\n      <slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'iff-grid-item': GridItem;\n  }\n}\n"]}